<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on KONPIG BLOG</title>
    <link>/posts/</link>
    <description>Recent content in Posts on KONPIG BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why JPA 2</title>
      <link>/posts/jpa-02/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/jpa-02/</guid>
      <description>#JPA
  JPA
 Java Persistence API 자바 진영의 ORM 기술 표준    ORM
 Object-relational mapping(객체 관계 매핑) 객체는 객체대로 설계 관계형 데이터베이스는 관계형 데이터베이스대로 설계 ORM 프레임워크가 중간에서 매핑 대중적인 언어에는 대부분 ORM 기술이 존재       JPA는 애플리케이션과 JDBC 사이에서 동작   JPA 동작 - 저장
  JPA 동작 - 조회
  JPA 소개
 EJB - 엔티티 빈(자바 표준) -&amp;gt; 하이버네이트(오픈 소스) -&amp;gt; JPA(자바 표준)    JPA는 표준 명세</description>
    </item>
    
    <item>
      <title>Why JPA</title>
      <link>/posts/jpa-01/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/jpa-01/</guid>
      <description>JPA 목차
 SQL 중심적인 개발의 문제점 JPA 소개  애플리케이션 - 객체지향언어
데이터베이스 세계의 헤게모니 - RDBMS
SQL 중심적인 개발의 문제점
 무한 반복, 지루한 코드(CRUD&amp;hellip;) RDBMS는 SQL에 의존적인 개발을 피하기 어렵다.  패러다임의 불일치 : 객체vsRDBMS
 객체 -&amp;gt; SQL변환 -&amp;gt; RDBMS SQL 매핑 작업은 누가 해? 개발자가 해.. 객체와 관계형 데이터베이스의 차이  상속 연관관계 데이터타입 데이터 식별 방법    객체를 자바 컬렉션에 저장하듯이 DB에 저장할 수는 없을까?</description>
    </item>
    
    <item>
      <title>JPA Intro</title>
      <link>/posts/jpa-intro/</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/jpa-intro/</guid>
      <description>JPA Intro Java Persistence API
순수 JDBC API + SQL 직접 입력
-&amp;gt; MyBatis, JDBCTemplate
-&amp;gt; JPA (SQL 입력 불필요)
목표 - 객체와 테이블 설계 매핑
 객체와 테이블을 제대로 설계하고 매핑하는 방법 기본 키와 외래 키 매핑 1:N, N:1, 1:1, N:M 매핑 실무 노하우 + 성능까지 고려 어떠한 복잡한 시스템도 JPA로 설계 가능  목표 - JPA 내부 동작 방식 이해
 JPA의 내부 동작 방식을 이해하지 못하고 사용 JPA 내부 동작 방식을 그림과 코드로 자세히 설명 JPA가 어떤 SQL을 만들어 내는지 이해 JPA가 언제 SQL을 실행하는지 이해  JPA 기본편 학습 방법</description>
    </item>
    
    <item>
      <title>Programmers 12899</title>
      <link>/posts/programmers-12899/</link>
      <pubDate>Wed, 22 Jul 2020 18:55:31 +0900</pubDate>
      
      <guid>/posts/programmers-12899/</guid>
      <description>문제 설명 124 나라가 있습니다. 124 나라에서는 10진법이 아닌 다음과 같은 자신들만의 규칙으로 수를 표현합니다.
  124 나라에는 자연수만 존재합니다.
  124 나라에는 모든 수를 표현할 때 1, 2, 4만 사용합니다.
  예를 들어서 124 나라에서 사용하는 숫자는 다음과 같이 변환됩니다.
   10진법 124 나라 10진법 124 나라     1 1 6 14   2 2 7 21   3 4 8 22   4 11 9 24   5 12 10 41    자연수 n이 매개변수로 주어질 때, n을 124 나라에서 사용하는 숫자로 바꾼 값을 return 하도록 solution 함수를 완성해 주세요.</description>
    </item>
    
    <item>
      <title>Elasticsearch</title>
      <link>/posts/elasticsearch/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/elasticsearch/</guid>
      <description>Elasticsearch란?   Apache Lucene(아파치 루씬) 기반의 Java 오픈소스 분산 검색 엔진
 루씬 : Java 기반 정보 검색 라이브러리 오픈소스 SW    방대한 양의 데이터를 신속하게, 거의 실시간(NRT; Near Real Time)으로 저장, 검색, 분석할 수 있다.
  ELK 스택 Elasticsearch는 검색을 위해 단독으로 사용되기도 하며,
ELK(Elasticsearch / Logstatsh / Kibana) 스택(연동 솔루션)으로도 사용한다.
  Logstash : 다양한 소스(DB, csv 파일 등)의 로그 또는 트랜잭션 데이터를 수집, 집계, 파싱하여 Elasticsearch로 전달</description>
    </item>
    
    <item>
      <title>Java LinkedList</title>
      <link>/posts/linkedlist/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/linkedlist/</guid>
      <description>Java LinkedList 클래스는 요소를 조작하기 위해 이중 연결 리스트를 사용한다.
AbstractSequentialList 클래스를 상속받으며 List와 Deque 인터페이스를 구현한다.
참고
주요 특징   LinkedList 클래스는 중복 요소를 가질 수 있다.
  LinkedList 클래스는 삽입 순서를 유지한다.
  LinkedList 클래스는 비동기적(non-synchronized)이다.
  LinkedList 클래스는 삽입/제거 시 요소의 이동이 없기 때문에 비교적 빠르다.
  LinkedList 클래스는 list, stack, queue로 사용할 수 있다.
  이중 연결 리스트(Doubly Linked List) 일반적인 연결 리스트(Linked List)의 노드들은 다음 노드를 가리키는 포인터(next)만 가지고 있어 단방향으로만 탐색이 가능하다.</description>
    </item>
    
    <item>
      <title>Java ArrayList</title>
      <link>/posts/arraylist/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/arraylist/</guid>
      <description>Java ArrayList 클래스는 요소를 저장하기 위해 동적배열을 사용한다. 배열과 같지만 크기 제한이 없다.
메소드를 사용해 언제든 요소를 추가/제거할 수 있다. C++의 Vector와 비슷하다.
ArrayList는 List 인터페이스를 구현하기 때문에 List 인터페이스의 모든 메소드를 사용할 수 있다.
ArrayList는 중복 요소를 가질 수 있으며 삽입 순서를 유지한다. 참고
주요 특징   ArrayList 클래스는 중복 요소를 가질 수 있다.
  ArrayList 클래스는 삽입 순서를 유지한다.
  ArrayList 클래스는 비동기적(non-synchronized)이다.
  ArrayList 클래스는 index 기반으로 랜덤 접근이 가능하다.</description>
    </item>
    
    <item>
      <title>Java Collection Framework</title>
      <link>/posts/collection-fw/</link>
      <pubDate>Thu, 16 Jul 2020 00:44:46 +0900</pubDate>
      
      <guid>/posts/collection-fw/</guid>
      <description>Java Collection은 데이터 집합의 저장 및 조작을 위한 구조를 제공하는 프레임워크다.
다시 쉽게 말해, Java Collection Framework는 다양한 인터페이스와 클래스를 제공하는 FW다. (참고)
  Collection ? 오브젝트의 단일 유닛(=그룹)을 나타낸다.
  Framework ? 이미 만들어진 구조를 제공한다. 클래스와 인터페이스의 set을 나타낸다.
  인터페이스 : Set, List, Queue, Deque, Map
 List와 Set은 Collection 인터페이스를 상속받지만, 구조상의 차이로 Map은 별도로 정의한다.    클래스 : ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet, HashTable, HashMap, SortedMap, TreeMap</description>
    </item>
    
    <item>
      <title>Big-O</title>
      <link>/posts/big-o/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/big-o/</guid>
      <description>Big-O 표기법이란 알고리즘의 효율성을 나타내는 지표 혹은 언어를 말한다.
보통 알고리즘의 시간복잡도와 공간복잡도를 나타낼 때 사용한다.
  시간복잡도 : 알고리즘의 시간 효율성
  공간복잡도 : 알고리즘의 공간(메모리) 효율성
- 크기가 N인 배열을 만들고자 한다면 공간복잡도는 O(N)
- 크기가 N*N인 2차원 배열을 만들고자 한다면 공간복잡도는 O(N^2)
- 공간복잡도 계산 시 재귀호출에서 사용하는 스택공간을 포함하여 계산해야한다.
   비교 그래프 자주 사용하는 Big-O 표기법을 효율성이 좋은 것 부터 나열해보자면 아래와 같다.</description>
    </item>
    
    <item>
      <title>Adding Disqus Plug In</title>
      <link>/posts/adding-disqus-plug-in/</link>
      <pubDate>Mon, 13 Jul 2020 23:35:15 +0900</pubDate>
      
      <guid>/posts/adding-disqus-plug-in/</guid>
      <description>어느정도 블로그 셋팅을 마무리하고 보니 어딘가 허전함이 느껴졌다.
자고로 블로그라 하면 소통 기능이 필요하지 않겠는가?
Disqus에서 제공하는 플러그인을 사용해 댓글 기능을 추가해보았다.
 1. 회원가입 먼저 disqus.com 에 회원가입을 한다. 페이스북, 트위터, 구글 소셜 가입/로그인도 가능하다.
2. 등록하기 메인 화면에서 GET STARTED 버튼을 클릭한다.
다음 화면에서 두번째 선택지(I want to install Disqus on my site)를 클릭한다.
필요한 정보를 입력하고 Create Site 버튼 클릭한다.
Website Name은 shortname 으로 사용할 원하는 이름을 적으면 된다.</description>
    </item>
    
    <item>
      <title>Creating a New Hugo Blog</title>
      <link>/posts/creating-a-new-hugo-blog/</link>
      <pubDate>Mon, 13 Jul 2020 20:50:39 +0900</pubDate>
      
      <guid>/posts/creating-a-new-hugo-blog/</guid>
      <description>MacOS에 hugo를 설치해 git 연동 블로그를 만들었다.
여러가지 개념을 제대로 익히지 않은 채 만들기 시작해서 설치와 제거를 여러번 반복했다.
이런 시행착오가 다시는 없길 바라며 첫 포스팅으로 MacOS hugo 블로그 만드는 과정을 정리해보려고 한다.
 1. Install Homebrew를 사용하여 hugo를 설치한다.
Homebrew가 설치되어있지 않다면 먼저 터미널에서 아래 스크립트를 실행하여 Homebrew를 설치한다.
여기에서 Homebrew에 대한 자세한 내용을 확인할 수 있다.
/bin/bash -c &amp;#34;$(curl -fsSl https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&amp;#34; Homebrew가 설치되었다면 터미널에 아래 스크립트를 실행하여 hugo를 설치한다.</description>
    </item>
    
    <item>
      <title>Blogs</title>
      <link>/posts/blogs/</link>
      <pubDate>Sun, 12 Jul 2020 22:50:06 +0900</pubDate>
      
      <guid>/posts/blogs/</guid>
      <description>This is a new blog page I can write in markdown over here
Index Links to blogs Links to blogs Links to blogs Links to blogs Links to blogs Links to blogs
 Markdown Is Fun  </description>
    </item>
    
  </channel>
</rss>